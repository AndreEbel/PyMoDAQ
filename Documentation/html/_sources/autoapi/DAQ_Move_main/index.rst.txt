
:mod:`DAQ_Move_main`
====================

.. py:module:: DAQ_Move_main









Module Contents
---------------



.. py:class:: DAQ_Move(parent,title="DAQ Move",preset=None,init=False)

   | DAQ_Move object is a module used to control one motor from a specified list.
   |
   | Preset is an optional list of dicts used to preset programatically settings such as the name of the controller from the list of possible controllers, COM address...
   |
   | Init is a boolean to tell the programm to initialize the controller at the start of the programm given the preset options

   ========================= =================================================
   **Attributes**             **Type**
   *command_stage*            instance of pyqtSignal
   *move_done_signal*         instance of pyqtSignal
   *update_settings_signal*   instance of pyqtSignal
   *log_signal*               instance of pyqtSignal
   *bounds_signal*            instance of pyqtSignal
   *params*                   dictionnary list
   *ui*                       instance of UI_Form
   *parent*                   QObject
   *title*                    string
   *wait_time*                int
   *Initialized_state*        boolean
   *Move_done*                boolean
   *controller*               instance of the specific controller object
   *stage*                    instance of the stage (axis or wathever) object
   *current_position*         float
   *target_position*          float
   *wait_position_flag*       boolean
   *stage_types*              string list
   ========================= =================================================

   .. seealso:: :class:`set_enabled_move_buttons`, :class:`set_setting_tree`, :class:`stage_changed`, :class:`Quit_fun`, :class:`IniStage_fun`, :class:`Move_Abs`, :class:`Move_Rel`, :class:`Move_Home`, :class:`Get_position`, :class:`Stop_Motion`, :class:`show_settings`, :class:`show_fine_tuning`

   .. rubric:: References

   QLocale, QObject, pyqtSignal, QStatusBar, ParameterTree


   

   

   

   .. method:: __init__(parent,title="DAQ Move",preset=None,init=False)

      



   

   .. method:: parameter_tree_changed(param,changes)

      
      | Check eventual changes in the changes list parameter.
      |
      | In case of changed values, emit the signal containing the current path and parameter via update_settings_signal to the connected hardware.

      =============== ====================================    ==================================================
      **Parameters**   **Type**                                **Description**

       *param*         instance of pyqtgraph parameter         The parameter to be checked

       *changes*       (parameter,change,infos) tuple list     The (parameter,change,infos) list to be treated
      =============== ====================================    ==================================================

      



   

   .. method:: set_setting_tree(index=0)

      
      Set the move settings parameters tree, clearing the current tree and setting the 'Move_Settings' node.

      .. seealso:: :meth:`update_status`

      



   

   .. method:: stage_changed(index=0)

      
      | Update the User Interface from the DAQ_Move_Stage_Type given by the position of index parameter.
      |
      | In case of Kinesis_Flipper hardware, update the Move_abs values to adapt the programm to the hardware, else re-init the Move_abs to default value.

      =============== =========== ====================================================================
      **Parameters**   **Type**    **Description**

       *index*         enum list   DAQ_Move_Stage_Type to be checked (corresponding to hardware type)
      =============== =========== ====================================================================

      .. seealso:: :meth:`Move_Abs`

      



   

   .. method:: show_fine_tuning()

      
      Make GroupBox visible if User Interface corresponding attribute is checked to show fine tuning in.

      



   

   .. method:: show_settings()

      
      Make settings tree visible if User Interface corresponding attribute is checked to show the settings tree in.

      



   

   .. method:: Quit_fun()

      
      Leave the current instance of DAQ_Move_Main closing the parent widget.

      



   

   .. method:: set_enabled_move_buttons(enable=False)

      
      Set the move buttons enabled (or not) in User Interface from the gridLayout_buttons course.

      =============== ========== ================================================
      **Parameters**   **Type**   **Description**

       *enable*        boolean    The parameter making enable or not the buttons
      =============== ========== ================================================

      



   

   .. method:: IniStage_fun()

      
      Init :
          * a DAQ_move_stage instance if not exists
          * a linked thread connected by signal to the DAQ_move_main instance

      .. seealso:: :meth:`set_enabled_move_buttons`, :meth:`DAQ_utils.ThreadCommand`, :meth:`DAQ_Move_stage`, :meth:`DAQ_Move_stage.queue_command`, :meth:`thread_status`, :meth:`DAQ_Move_stage.update_settings`, :meth:`update_status`

      



   

   .. method:: thread_status(status)

      
      | General function to get datas/infos from all threads back to the main0
      |

      Interpret a command from the command given by the ThreadCommand status :
          * In case of **'Update_status'** command, call the update_status method with status attributes as parameters
          * In case of **'Ini_Stage'** command, initialise a Stage from status attributes
          * In case of **'Close'** command, close the launched stage thread
          * In case of **'Check_position'** command, set the Current_position value from status attributes
          * In case of **'Move_Done'** command, set the Current_position value, make profile of Move_Done and send the move done signal with status attributes
          * In case of **'Move_Not_Done'** command, set the current position value from the status attributes, make profile of Not_Move_Done and send the Thread Command "Move_abs"
          * In case of **'update_settings'** command, create child "Move Settings" from  status attributes (if possible)

      ================ ================= ======================================================
      **Parameters**     **Type**         **Description**

      *status*          ThreadCommand()   instance of ThreadCommand containing two attributes :

                                           * *command*    str
                                           * *attributes* list

      ================ ================= ======================================================

      .. seealso:: :meth:`update_status`, :meth:`set_enabled_move_buttons`, :meth:`Get_position`, :meth:`DAQ_utils.ThreadCommand`, :meth:`parameter_tree_changed`, :meth:`raise_timeout`

      



   

   .. method:: update_status(txt,wait_time=0,log_type=None)

      
      Show the given txt message in the status bar with a delay of wait_time ms if specified (0 by default).

      ================ ========== =================================
      **Parameters**    **Type**   **Description**

       *txt*            string     The message to show

       *wait_time*      int        The delay time of showing

       *log_type*       string     The type of the log
      ================ ========== =================================

      



   

   .. method:: Move_Abs(position)

      
      | Make the move from an absolute position.
      |
      | The move is made if target is in bounds, sending the thread command "Reset_Stop_Motion" and "Move_Abs".

      =============== ========== ===========================================
      **Parameters**   **Type**    **Description**

      *position*        float      The absolute target position of the move
      =============== ========== ===========================================

      .. seealso:: :meth:`update_status`, :meth:`check_out_bounds`, :meth:`DAQ_utils.ThreadCommand`

      



   

   .. method:: check_out_bounds(position)

      
      Emit a bounds signal if the checked position is out of bounds.

      =============== ========== ===========================================
      **Parameters**   **Type**    **Description**

      *position*        float      The position to be checked
      =============== ========== ===========================================

      



   

   .. method:: Move_Rel(rel_position)

      
      | Make a move from the given relative psition and the current one.
      |
      | The move is done if (current position + relative position) is in bounds sending Threads Commands "Reset_Stop_Motion" and "Move_Done"

      =============== ========== ===================================================
      **Parameters**   **Type**    **Description**

      *position*        float     The relative target position from the current one
      =============== ========== ===================================================

      .. seealso:: :meth:`update_status`, :meth:`check_out_bounds`, :meth:`DAQ_utils.ThreadCommand`

      



   

   .. method:: Move_Home()

      
      Send the thread commands "Reset_Stop_Motion" and "Move_Home" and update the status.

      .. seealso:: :meth:`update_status`, :meth:`DAQ_utils.ThreadCommand`

      



   

   .. method:: Get_position()

      
      Get the current position from the launched thread via the "Check_position" Thread Command.

      .. seealso:: :meth:`update_status`, :meth:`DAQ_utils.ThreadCommand`

      



   

   .. method:: Stop_Motion()

      
      Stop any motion via the launched thread with the "Stop_Motion" Thread Command.

      .. seealso:: :meth:`update_status`, :meth:`DAQ_utils.ThreadCommand`

      



   

   .. method:: raise_timeout()

      
      Update status with "Timeout occured" statement.

      .. seealso:: :meth:`update_status`

      


   



.. py:class:: DAQ_Move_stage(stage_name,position)

   ================== ========================
   **Attributes**      **Type**
   *status_sig*        instance of pyqtSignal
   *hardware*          ???
   *stage_name*        string
   *current_position*  float
   *target_position*   float
   *hardware_adress*   string
   *axis_address*      string
   *motion_stoped*     boolean
   ================== ========================


   

   

   

   .. method:: __init__(stage_name,position)

      



   

   .. method:: queue_command(command=ThreadCommand)

      
      Interpret the given Thread Command.
          * In case of **'Ini_Stage'** command, init a stage from command attributes.
          * In case of **'Close'** command, unitinalise the stage closing hardware and emitting the corresponding status signal
          * In case of **'Move_Abs'** command, call the Move_Abs method with position from command attributes
          * In case of **'Move_Rel'** command, call the Move_Rel method with the relative position from the command attributes.
          * In case of **'Move_Home'** command, call the Move_Home method
          * In case of **'Check_position'** command, get the current position from the Check_position method
          * In case of **'Stop_motion'** command, stop any motion via the Stop_Motion method
          * In case of **'Reset_Stop_Motion'** command, set the motion_stopped attribute to false

      =============== =============== ================================
      **Parameters**   **Type**        **Description**

       *command*      ThreadCommand()   The command to be interpreted
      =============== =============== ================================

      .. seealso:: :meth:`DAQ_utils.ThreadCommand`, :meth:`Ini_Stage`, :meth:`Close`, :meth:`Move_Abs`, :meth:`Move_Rel`, :meth:`Move_Home`, :meth:`Check_position`, :meth:`Stop_Motion`

      



   

   .. method:: Ini_Stage(params_state=None,controller=None,stage=None)

      
      Init a stage updating the hardware and sending an hardware Move_Done signal.

      =============== =================================== ==========================================================================================================================
      **Parameters**   **Type**                             **Description**

       *params_state*  ordered dictionnary list             The parameter state of the hardware class composed by a list representing the tree to keep a temporary save of the tree

       *controller*    one or many instance of DAQ_Move     The controller id of the hardware

       *stage*         instance of DAQ_Move                 Defining axes and motors
      =============== =================================== ==========================================================================================================================

      .. seealso:: :meth:`DAQ_utils.ThreadCommand`, :meth:`DAQ_Move`

      



   

   .. method:: update_settings(settings_parameter_dict)

      
      Update settings of hardware with dictionnary parameters in case of "Move_Settings" path, else update attributes with dictionnary parameters.

      =========================  =========== ======================================================
      **Parameters**              **Type**    **Description**

      *settings_parameter_dict*  dictionnary  Dictionnary containing the path and linked parameter
      =========================  =========== ======================================================

      .. seealso:: :meth:`update_settings`

      



   

   .. method:: Close()

      
      Uninitialize the stage closing the hardware.

      



   

   .. method:: Move_Abs(position)

      
      Make the hardware absolute move from the given position.

      =============== ========= =======================
      **Parameters**  **Type**   **Description**

      *position*       float     The absolute position
      =============== ========= =======================

      .. seealso:: :meth:`Move_Abs`

      



   

   .. method:: Move_Rel(rel_position)

      
      Make the hardware relative move from the given relative position added to the current one.

      ================ ========= ======================
      **Parameters**   **Type**  **Description**

       *position*       float    The relative position
      ================ ========= ======================

      .. seealso:: :meth:`Move_Rel`

      



   

   .. method:: Move_Home()

      
      Make the hardware move to the init position.

      



   

   .. method:: Check_position()

      
      Get the current position checking the harware position.

      



   

   .. method:: Stop_Motion()

      
      Stop hardware motion with motion_stopped attribute updtaed to True and a status signal sended with an "update_status" Thread Command

      .. seealso:: :meth:`DAQ_utils.ThreadCommand`, :meth:`Stop_Motion`

      



   

   .. method:: Move_Done(pos)

      
      | Send a "Move_Done" Thread Command with the given position as an attribute and update the current position attribute.
      |
      | Check if position reached within epsilon => not necessary this is done within the hardware code see polling for instance

      .. seealso:: :meth:`DAQ_utils.ThreadCommand`

      



   

   .. method:: Move_Stoped(pos)

      
      Send a "Move_Done" Thread Command with the given position as an attribute.

      .. seealso:: :meth:`DAQ_utils.ThreadCommand`

      


   


