
:mod:`DAQ_viewer_main`
======================

.. py:module:: DAQ_viewer_main



.. autoapi-nested-parse::

   Created on Wed Jan 10 16:54:14 2018

   @author: Weber SÃ©bastien










Module Contents
---------------



.. py:class:: QSpinBox_ro(**kwargs)

   

   

   .. method:: __init__(**kwargs)

      


   



.. py:class:: DAQ_Viewer(parent,dock_settings=None,dock_viewer=None,title="Testing",DAQ_type="DAQ2D",preset=None,init=False)

   ========================= =======================================
   **Attributes**             **Type**

   *command_detector*         instance of pyqt Signal
   *grab_done_signal*         instance of pyqt Signal
   *quit_signal*              instance of pyqt Signal
   *update_settings_signal*   instance of pyqt Signal
   *overshoot_signal*         instance of pyqt Signal
   *log_signal*               instance of pyqt Signal
   *params*                   dictionnary list

   *widgetsettings*           instance of QWidget
   *title*                    string
   *DAQ_type*                 string
   *dockarea*                 instance of DockArea
   *bkg*                      ???
   *filters*                  instance of tables.Filters
   *settings*                 instance of pyqtgraph parameter tree
   *measurement_module*       ???
   *detector*                 instance of DAQ_Detector
   *wait_time*                int
   *save_file_pathname*       string
   *ind_continuous_grab*      int
   *Initialized_state*        boolean
   *snapshot_pathname*        string
   *x_axis*                   1D numpy array
   *y_axis*                   1D numpy array
   *current_datas*            dictionnary
   *data_to_save_export*      ordered dictionnary
   *do_save_data*             boolean
   *do_continuous_save*       boolean
   *file_continuous_save*     ???
   ========================= =======================================


   

   

   

   .. method:: __init__(parent,dock_settings=None,dock_viewer=None,title="Testing",DAQ_type="DAQ2D",preset=None,init=False)

      



   

   .. method:: change_viewer(DAQ_type="DAQ0D")

      
      Change the viewer type from DAQ_Type value between :
          * **DAQ0D** : a 0D instance of viewer
          * **DAQ1D** : a 1D instance of viewer
          * **DAQ2D** : a 2D instance of viewer

      ============== ========== ===========================================
      **Parameters**  **Type**   **Description**
      *DAQ_type*      string     Define the target dimension of the viewer
      ============== ========== ===========================================

      



   

   .. method:: load_data()

      
      Load a .h5 file content from th select_file obtained pathname.
      In case of :
      * **DAQ0D type** : do nothing.
      * **DAQ1D type** : get x_axis and update the data viewer.
      * **DAQ2D type** : get x_axis, y_axis and update the data viewer.

      Once done show data on screen.

      .. seealso:: :meth:`DAQ_utils.select_file`, :meth:`show_data`, :meth:`update_status`

      



   

   .. method:: take_bkg()

      
      Save a new file if bkg check button is on.

      .. seealso:: :meth:`save_new`

      



   

   .. method:: save_settings(path=None)

      
      | Save the current viewer settings.
      | In case of Region Of Interest setting, save the current viewer state.
      | Then dump setting if the QDialog has been cancelled.

      ============== ========= ======================================
      **Parameters** **Type**  **Description**
      path           string    the pathname of the file to be saved.
      ============== ========= ======================================

      .. seealso:: :meth:`DAQ_utils.select_file`, :meth:`update_status`

      



   

   .. method:: load_settings(path=None)

      
      | Load settings contained in the pathname file (or select_file destination if path not defined).
      | Open a DAQ_type viewer instance (0D, 1D or 2D), send a data_to_export signal and restore state from the loaeded settings.

      =============== ========== =======================================
      **Parameters**   **Type**   **Description**
      *path*           string     the pathname of the file to be loaded
      =============== ========== =======================================

      .. seealso:: :meth:`IniDet_fun`, :meth:`update_status`

      



   

   .. method:: update_com()

      



   

   .. method:: parameter_tree_changed(param,changes)

      
      Foreach value changed, update :
          * Viewer in case of **DAQ_type** parameter name
          * visibility of button in case of **show_averaging** parameter name
          * visibility of naverage in case of **live_averaging** parameter name
          * scale of axis **else** (in 2D DAQ type)

      Once done emit the update settings signal to link the commit.

      =============== =================================== ================================================================
      **Parameters**    **Type**                           **Description**
      *param*           instance of ppyqtgraph parameter   the parameter to be checked
      *changes*         tuple list                         Contain the (param,changes,info) list listing the changes made
      =============== =================================== ================================================================

      .. seealso:: :meth:`change_viewer`, :meth:`DAQ_Utils.custom_parameter_tree.iter_children`

      



   

   .. method:: get_scaling_options()

      
      Return the initialized dictionnary containing the scaling options.


      :returns: scaling options dictionnary.
      :rtype: dictionnary

      



   

   .. method:: set_setting_tree()

      
      Set the local setting tree instance cleaning the current one and populate it with
      standard options corresponding to the DAQ type viewer (0D, 1D or 2D).

      .. seealso:: :meth:`update_status`

      



   

   .. method:: set_continuous_save()

      
      Set a continous save file using the base path located file with
      a header-name containing date as a string.

      .. seealso:: :meth:`DAQ_utils.set_current_scan_path`

      



   

   .. method:: save_export_data(datas)

      
      Store in data_to_save_export buffer the data to be saved and do save at self.snapshot_pathname.

      ============== ============= ======================
      **Parameters**   **Type**     **Description**
      *datas*         dictionnary  the data to be saved
      ============== ============= ======================

      .. seealso:: :meth:`save_datas`

      



   

   .. method:: save_datas(path=None,datas=None)

      
      Save procedure of .h5 file data.
      Course the data array and with :
      * **0D data** : store corresponding datas in a h5 file group (a node of the h5 tree)
      * **1D data** : store corresponding datas in a h5 file group (a node of the h5 tree) with a special array for x_axis values
      * **2D data** : store corresponding datas in a h5 file group (a node of the h5 tree) with a special array for x_axis and y_axis values.

      =============== ============= ========================================
      **Parameters**   **Type**     **Description**
      *path*           string        the path name of the file to be saved.
      *datas*          dictionnary   the raw datas to save.
      =============== ============= ========================================

      .. seealso:: :meth:`DAQ_utils.select_file`, :meth:`DAQ_Utils.custom_parameter_tree.parameter_to_xml_string`, :meth:`update_status`

      



   

   .. method:: update_status(txt,wait_time=0,log_type=None)

      
      | Show the given txt message in the status bar with a delay of wait_time ms.
      | Emit a log signal if log_type parameter is defined.

      =============== =========== =====================================
      **Parameters**    **Type**   **Description**
      *txt*             string     the message to show
      *wait_time*       int        the delay of showwing
      *log_type*        string     the type of  the log signal to emit
      =============== =========== =====================================

      



   

   .. method:: save_new()

      
      Do a new save from the select_file obtained pathname into a h5 file structure.

      .. seealso:: :meth:`DAQ_utils.select_file`, :meth:`SnapShot`

      



   

   .. method:: save_current()

      
      Save the current opened file from the select_file obtained pathname into a h5 file structure.

      .. seealso:: :meth:`DAQ_utils.select_file`, :meth:`save_export_data`

      



   

   .. method:: SnapShot(pathname=None)

      
      Do one single grab and save the data in pathname.

      =============== =========== =================================================
      **Parameters**    **Type**    **Description**
      *pathname*        string      the pathname to the location os the saved file
      =============== =========== =================================================

      .. seealso:: :meth:`Grab`, :meth:`update_status`

      



   

   .. method:: Grab(grab_state=False)

      
      Do a grab session using 2 profile :
          * if grab pb checked do  a continous save and send an "update_channels" thread command and a "Grab" too.
          * if not send a "Stop_grab" thread command with settings "main settings-naverage" node value as an attribute.

      .. seealso:: :meth:`DAQ_utils.ThreadCommand`, :meth:`set_enabled_Ini_buttons`

      



   

   .. method:: IniDet_fun()

      
      | If Init detector button checked, init the detector and connect the data detector, the data detector temp, the status and the update_settings signals to their corresponding function.
      | Once done start the detector linked thread.
      |
      | Else send the "close" thread command.

      .. seealso:: :meth:`set_enabled_grab_buttons`, :meth:`DAQ_utils.ThreadCommand`, :meth:`DAQ_Detector`

      



   

   .. method:: Quit_fun()

      
      | Close the current instance of DAQ_Viewer_main emmiting the quit signal.
      | Treat an exception if an error during the detector unitializing has occured.

      



   

   .. method:: show_settings()

      
      Set the settings tree visible if the corresponding button is checked.

      



   

   .. method:: set_enabled_Ini_buttons(enable=False)

      
      Set enable :
          * **Detector** button
          * **Init Detector** button
          * **Quit** button

      with the given enable boolean value.

      =============== =========== ===================
      **Parameters**    **Type**    **Description**
      *enable*          boolean     the value to map
      =============== =========== ===================

      



   

   .. method:: set_enable_recursive(children,enable=False)

      
      | Set enable childs of chidren root argument with enable parameter value (False as default) calling recursively the method on children.
      |
      | Recursivity decreasing on children argument.

      =============== ===================== ==================================================
      **Parameters**    **Type**             **Description**
      *children*        settings tree node   The starting node of the (sub)tree to be treated
      *enable*          boolean              the default value to map
      =============== ===================== ==================================================

      .. seealso:: :meth:`set_enable_recursive`

      



   

   .. method:: set_enabled_grab_buttons(enable=False)

      
      Set enable with parameter value :
          * **grab** button
          * **single** button
          * **save current** button
          * **save new** button

      =============== =========== ===========================
      **Parameters**    **Type**    **Description**
      enable            boolean     the default value to map
      =============== =========== ===========================

      



   

   .. method:: show_temp_data(datas)

      
      | Show the given datas in a temporary viewer in case of 0D/D datas.
      | In case of 2D datas, send a list of images (at most 3) to the 2D viewer.

      =============== ===================== ========================
      **Parameters**    **Type**             **Description**
      datas             ordered dictionnary  the datas to be showed.
      =============== ===================== ========================

      



   

   .. method:: show_data(datas)

      
      | Check the snapshot leaf in the tree, if not none and data over the overshoot threshold, send an overshot signal.
      |
      | Process background buffer if needed.
      | Process live averaging if needed.
      | Show datas in case of 0D or 1D DAQ_type.
      | Send a list of images (at most 3) to the 2D viewer else.

      =============== ===================== ===================
      **Parameters**    **Type**             **Description**
      *datas*           ordered dictionnary  the datas to show
      =============== ===================== ===================

      .. seealso:: :meth:`update_status`

      



   

   .. method:: get_data_from_viewer(datas)

      
      Emit the grab done signal with datas as an attribute.

      =============== ===================== ===================
      **Parameters**    **Type**             **Description**
      *datas*           ordered dictionnary  the datas to show
      =============== ===================== ===================

      



   

   .. method:: thread_status(status)

      
      General function to get datas/infos from all threads back to the main.

      In case of :
          * **Update_Status**   *command* : update the status from the given status attributes
          * **Ini_Detector**    *command* : update the status with "detector initialized" value and init state if attributes not null.
          * **Close**           *command* : Close the current thread and delete corresponding attributes on cascade.
          * **Grab**            *command* : Do nothing
          * **x_axis**          *command* : update x_axis from status attributes and User Interface viewer consequently.
          * **y_axis**          *command* : update y_axis from status attributes and User Interface viewer consequently.
          * **Update_channel**  *command* : update the viewer channels in case of 0D DAQ_type
          * **Update_settings** *command* : Update the "detector setting" node in the settings tree.

      =============== ================ =======================================================
      **Parameters**   **Type**            **Description**

      *status*        ThreadCommand()     instance of ThreadCommand containing two attributes:
                                              * command   : string
                                              * attributes: list
      =============== ================ =======================================================

      .. seealso:: :meth:`update_status`, :meth:`set_enabled_grab_buttons`, :meth:`raise_timeout`

      



   

   .. method:: raise_timeout()

      
      Print the "timeout occured" error message in the status bar via the update_status method.

      .. seealso:: :meth:`update_status`

      


   



.. py:class:: DAQ_Detector(settings_parameter,detector_name)

   ========================= ==========================
   **Attributes**              **Type**
   *status_sig*                instance of pyqt Signal
   *data_detector_sig*         instance of pyqt Signal
   *data_detector_temp_sig*    instance of pyqt Signal

   *waiting_for_data*          boolean
   *controller*                ???
   *detector_name*             string
   *detector*                  ???
   *controller_adress*         ???
   *grab_state*                boolean
   *single_grab*               boolean
   *x_axis*                    1D numpy array
   *y_axis*                    1D numpy array
   *datas*                     dictionnary
   *ind_average*               int
   *Naverage*                  int
   *average_done*              boolean
   *hardware_averaging*        boolean
   *show_averaging*            boolean
   *wait_time*                 int
   *DAQ_type*                  string
   ========================= ==========================


   

   

   

   .. method:: __init__(settings_parameter,detector_name)

      



   

   .. method:: update_settings(settings_parameter_dict)

      
      | Set attributes values in case of "main_settings" path with corresponding parameter values.
      | Recursively call the method on detector class attributes else.

      ======================== ============== ======================================
      **Parameters**             **Type**      **Description**
      settings_parameter_dict    dictionnary   the (pathname,parameter) dictionnary
      ======================== ============== ======================================

      .. seealso:: :meth:`update_settings`

      



   

   .. method:: queue_command(command=ThreadCommand)

      
      Treat the given command parameter from his name :
        * **Ini_Detector** : Send the corresponding Thread command via a status signal.
        * **Close**        : Send the corresponding Thread command via a status signal.
        * **Grab**         : Call the local Grab method with command(s) attributes.
        * **Single**       : Call the local Single method with command(s) attributes.
        * **Stop_Grab**    : Send the correpsonding Thread command via a status signal.

      =============== ================= ============================
      **Parameters**    *Type*           **Description**
      *command*         ThreadCommand()  The command to be treated
      =============== ================= ============================

      .. seealso:: :meth:`Grab`, :meth:`Single`, :meth:`DAQ_utils.ThreadCommand`

      



   

   .. method:: Ini_Detector(params_state=None)

      
      Init the detector from params_state parameter and DAQ_type class attribute :
          * in **0D** profile : update the local status and send the "x_axis" Thread command via a status signal
          * in **1D** profile : update the local status and send the "x_axis" Thread command via a status signal
          * in **2D** profile : update the local status and send the "x_axis" and the "y_axis" Thread command via a status signal

      =============== =========== ==========================================
      **Parameters**    **Type**    **Description**
      *params_state*     ???         the parameter's state of initialization
      =============== =========== ==========================================

      .. seealso:: :meth:`Ini_Detector`, :meth:`DAQ_utils.ThreadCommand`

      



   

   .. method:: data_ready(datas)

      
      | Update the local datas attributes from the given datas parameter if the averaging has to be done software wise.
      |
      | Else emit the data detector signals with datas parameter as an attribute.

      =============== ===================== =========================
      **Parameters**    **Type**             **Description**
      *datas*           ordered dictionnary  the datas to be emitted.
      =============== ===================== =========================

      .. seealso:: :meth:`DAQ_utils.ThreadCommand`

      



   

   .. method:: Single(Naverage=1)

      
      Call the Grab method with Naverage parameter as an attribute.

      =============== =========== ==================
      **Parameters**    **Type**    **Description**
      *Naverage*        int
      =============== =========== ==================

      .. seealso:: :meth:`DAQ_utils.ThreadCommand`, :meth:`Grab`

      



   

   .. method:: Grab(Naverage=1)

      
      | Update status with 'Start Grabing' Update_status sub command of the Thread command.
      | Process events and grab naverage is needed.

      =============== =========== ==================
      **Parameters**    **Type**    **Description**
      *Naverage*        int
      =============== =========== ==================

      .. seealso:: :meth:`DAQ_utils.ThreadCommand`, :meth:`Grab`

      



   

   .. method:: Close()

      
      Close the current instance of DAQ_Detector.

      


   


