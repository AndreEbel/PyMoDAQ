
:mod:`hardware`
===============

.. py:module:: hardware









Module Contents
---------------



.. py:class:: DAQ_Move_Stage_type

   Enum class listing the differents hardware profile.

   =================== =========== ==============================
   **Attributes**       **Type**
   *Mock*               int        assigned name from int index
   *Conex*              int        assigned name from int index
   *Kinesis*            int        assigned name from int index
   *Kinesis_Flipper*    int        assigned name from int index
   *PI*                 int        assigned name from int index
   *PiezoConcept*       int        assigned name from int index
   =================== =========== ==============================


   

   

   

   .. method:: names()

      


   



.. py:class:: DAQ_Move_base(parent=None,params_state=None)

   ================== =================================================
   **Attributes**      **Type**

   *Move_Done_signal*  instance of pyqtSignal
   *params*            list

   *parent*            QObject
   *controller*        instance of the controller object
   *stage*             instance of the stage (axis or whatever) object
   *status*            dictionnary
   *current_position*  float
   *target_position*   float
   *settings*          instance of pyqtgraph Parametertree
   ================== =================================================

   .. seealso:: :class:`send_param_status`


   

   

   

   .. method:: __init__(parent=None,params_state=None)

      



   

   .. method:: get_position_with_scaling(pos)

      
      Get the current position from the hardware with scaling conversion.

      =============== ========= =====================
      **Parameters**  **Type**  **Description**
       *pos*           float    the current position
      =============== ========= =====================

      :returns: the computed position.
      :rtype: float

      



   

   .. method:: set_position_with_scaling(pos)

      
      Set the current position from the parameter and hardware with scaling conversion.

      =============== ========= ==========================
      **Parameters**  **Type**  **Description**
       *pos*           float    the position to be setted
      =============== ========= ==========================

      :returns: the computed position.
      :rtype: float

      



   

   .. method:: emit_status(status)

      
      | Emit the statut signal from the given status parameter.
      |
      | The signal is sended to the gui to update the user interface.

      =============== ===================== ========================================================================================================================================
      **Parameters**   **Type**              **Description**
       *status*        ordered dictionnary    dictionnary containing keys:
                                                  * *info* : string displaying various info
                                                  * *controller*: instance of the controller object in order to control other axes without the need to init the same controller twice
                                                  * *stage*: instance of the stage (axis or whatever) object
                                                  * *initialized*: boolean indicating if initialization has been done corretly
      =============== ===================== ========================================================================================================================================

      



   

   .. method:: poll_moving()

      
      Poll the current moving. In case of timeout emit the raise timeout Thread command.

      .. seealso:: :meth:`DAQ_utils.ThreadCommand`, :meth:`Move_Done`

      



   

   .. method:: Move_Done(position=None)

      
      | Emit a move done signal transmitting the float position to hardware.
      | The position argument is just there to match some signature of child classes.

      =============== ========== =============================================================================
       **Arguments**   **Type**  **Description**
       *position*      float     The position argument is just there to match some signature of child classes
      =============== ========== =============================================================================

      



   

   .. method:: update_settings(settings_parameter_dict)

      
      Receive the settings_parameter signal from the param_tree_changed method and make hardware updates of mmodified values.

      ==========================  =========== ==========================================================================================================
      **Arguments**               **Type**     **Description**
      *settings_parameter_dict*   dictionnary Dictionnary with the path of the parameter in hardware structure as key and the parameter name as element
      ==========================  =========== ==========================================================================================================

      .. seealso:: :meth:`send_param_status`, :meth:`commit_settings`

      



   

   .. method:: commit_settings(param)

      
      not implemented.

      



   

   .. method:: send_param_status(param,changes)

      
      | Send changes value updates to the gui to update consequently the User Interface.
      | The message passing is made via the Thread Command "update_settings".

      =============== =================================== ==================================================
      **Parameters**  **Type**                             **Description**
      *param*         instance of pyqtgraph parameter      The parameter to be checked
      *changes*       (parameter,change,infos)tuple list   The (parameter,change,infos) list to be treated
      =============== =================================== ==================================================

      .. seealso:: :meth:`DAQ_utils.ThreadCommand`

      


   



.. py:class:: DAQ_Move_Mock(parent=None,params_state=None)

   Wrapper object to access the Mock fonctionnalities, similar wrapper for all controllers.

   =============== ==============
   **Attributes**    **Type**
   *params*          dictionnary
   =============== ==============


   

   

   

   .. method:: __init__(parent=None,params_state=None)

      



   

   .. method:: Ini_Stage(controller=None,stage=None)

      
      Initialize the controller and stages (axes) with given parameters.

      ============== ================================================ ==========================================================================================
      **Parameters**  **Type**                                         **Description**

      *controller*    instance of the specific controller object       If defined this hardware will use it and will not initialize its own controller instance
      *stage*         instance of the stage (axis or whatever) object  ???
      ============== ================================================ ==========================================================================================

      :returns:

                dictionnary containing keys:
                 * *info* : string displaying various info
                 * *controller*: instance of the controller object in order to control other axes without the need to init the same controller twice
                 * *stage*: instance of the stage (axis or whatever) object
                 * *initialized*: boolean indicating if initialization has been done corretly
      :rtype: Easydict

      



   

   .. method:: Close()

      
      not implemented.

      



   

   .. method:: Stop_Motion()

      
      Call the specific Move_Done function (depending on the hardware).

      .. seealso:: :meth:`Move_Done`

      



   

   .. method:: Check_position()

      
      Get the current position from the hardware with scaling conversion.

      :returns: The position obtained after scaling conversion.
      :rtype: float

      .. seealso:: :meth:`DAQ_Move_base.get_position_with_scaling`, :meth:`DAQ_utils.ThreadCommand`

      



   

   .. method:: Move_Abs(position)

      
      Make the absolute move from the given position after thread command signal was received in DAQ_Move_main.

      =============== ========= =======================
      **Parameters**  **Type**   **Description**

      *position*       float     The absolute position
      =============== ========= =======================

      .. seealso:: :meth:`DAQ_Move_base.set_position_with_scaling`, :meth:`DAQ_Move_base.poll_moving`

      



   

   .. method:: Move_Rel(position)

      
      Make the relative move from the given position after thread command signal was received in DAQ_Move_main.

      =============== ========= =======================
      **Parameters**  **Type**   **Description**

      *position*       float     The absolute position
      =============== ========= =======================

      .. seealso:: :meth:`hardware.set_position_with_scaling`, :meth:`DAQ_Move_base.poll_moving`

      



   

   .. method:: Move_Home()

      
      Send the update status thread command.
      See Also
      --------
      DAQ_utils.ThreadCommand

      


   



.. py:class:: DAQ_Move_Conex(parent=None,params_state=None)

   Wrapper object to access the conex fonctionnalities, similar wrapper for all controllers.

   =============== ==================
   **Attributes**   **Type**
   *ports*          list
   *conex_path*     string
   *params*         dictionnary list
   =============== ==================

   .. seealso:: :class:`DAQ_utils.ThreadCommand`


   

   

   

   .. method:: __init__(parent=None,params_state=None)

      



   

   .. method:: Ini_Stage(controller=None,stage=None)

      
      Initialize the controller and stages (axes) with given parameters.

      =============== ================================================ =========================================================================================
      **Parameters**   **Type**                                         **Description**
      *controller*     instance of the specific controller object       If defined this hardware will use it and will not initialize its own controller instance
      *stage*          instance of the stage (axis or whatever) object  ???
      =============== ================================================ =========================================================================================

      :returns:

                dictionnary containing keys:
                 * *info* : string displaying various info
                 * *controller*: instance of the controller object in order to control other axes without the need to init the same controller twice
                 * *stage*: instance of the stage (axis or whatever) object
                 * *initialized*: boolean indicating if initialization has been done corretly
      :rtype: Easydict

      .. seealso:: :meth:`DAQ_utils.ThreadCommand`

      



   

   .. method:: Close()

      
      Close the current instance of instrument.

      



   

   .. method:: Stop_Motion()

      
      .. seealso:: :meth:`DAQ_Move_base.Move_Done`

      



   

   .. method:: Check_position()

      
      Get the current hardware position with scaling conversion given by get_position_with_scaling.

      .. seealso:: :meth:`DAQ_Move_base.get_position_with_scaling`, :meth:`DAQ_utils.ThreadCommand`

      



   

   .. method:: Move_Abs(position)

      
      Make the hardware absolute move from the given position after thread command signal was received in DAQ_Move_main.

      =============== ========= =======================
      **Parameters**  **Type**   **Description**

      *position*       float     The absolute position
      =============== ========= =======================

      .. seealso:: :meth:`DAQ_Move_base.set_position_with_scaling`, :meth:`DAQ_Move_base.poll_moving`

      



   

   .. method:: Move_Rel(position)

      
      | Make the hardware relative move from the given position after thread command signal was received in DAQ_Move_main.
      |
      | The final target position is given by **current_position+position**.

      =============== ========= =======================
      **Parameters**  **Type**   **Description**

      *position*       float     The absolute position
      =============== ========= =======================

      .. seealso:: :meth:`DAQ_Move_base.set_position_with_scaling`, :meth:`DAQ_Move_base.poll_moving`

      



   

   .. method:: Move_Home()

      
      Make the absolute move to original position (0).

      .. seealso:: :meth:`Move_Abs`

      


   



.. py:class:: DAQ_Move_Kinesis(parent=None,params_state=None)

   Wrapper object to access the kinesis fonctionnalities, similar wrapper for all controllers.

   =============== ==================
   **Attributes**   **Type**
   *Kinesis_path*   string
   *serialnumbers*  int list
   *params*         dictionnary list
   =============== ==================

   .. seealso:: :class:`DAQ_utils.ThreadCommand`


   

   

   

   .. method:: __init__(parent=None,params_state=None)

      



   

   .. method:: commit_settings(param)

      
      | Activate any parameter changes on the hardware.
      | Called after a param_tree_changed signal received from DAQ_Move_main.

      =============== ================================ ========================
      **Parameters**  **Type**                          **Description**
      *param*         instance of pyqtgraph parameter  The parameter to update
      =============== ================================ ========================

      



   

   .. method:: Ini_Stage(controller=None,stage=None)

      
      Initialize the controller and stages (axes) with given parameters.

      =============== ================================================ =========================================================================================
      **Parameters**   **Type**                                         **Description**
      *controller*     instance of the specific controller object       If defined this hardware will use it and will not initialize its own controller instance
      *stage*          instance of the stage (axis or whatever) object  ???
      =============== ================================================ =========================================================================================

      :returns:

                dictionnary containing keys:
                 * *info* : string displaying various info
                 * *controller*: instance of the controller object in order to control other axes without the need to init the same controller twice
                 * *stage*: instance of the stage (axis or whatever) object
                 * *initialized*: boolean indicating if initialization has been done corretly
      :rtype: Easydict

      .. seealso:: :meth:`DAQ_utils.ThreadCommand`

      



   

   .. method:: Close()

      
      Close the current instance of Kinesis instrument.

      



   

   .. method:: Stop_Motion()

      
      .. seealso:: :meth:`DAQ_Move_base.Move_Done`

      



   

   .. method:: Check_position()

      
      Get the current hardware position with scaling conversion of the Kinsesis insrument provided by get_position_with_scaling

      .. seealso:: :meth:`DAQ_Move_base.get_position_with_scaling`, :meth:`DAQ_utils.ThreadCommand`

      



   

   .. method:: Move_Abs(position)

      
      Make the hardware absolute move from the given position of the Kinesis instrument after thread command signal was received in DAQ_Move_main.

      =============== ========= =======================
      **Parameters**  **Type**   **Description**

      *position*       float     The absolute position
      =============== ========= =======================

      .. seealso:: :meth:`DAQ_Move_base.set_position_with_scaling`

      



   

   .. method:: Move_Rel(position)

      
      | Make the hardware relative move from the given position of the Kinesis instrument after thread command signal was received in DAQ_Move_main.
      |
      | The final target position is given by **current_position+position**.

      =============== ========= =======================
      **Parameters**  **Type**   **Description**

      *position*       float     The absolute position
      =============== ========= =======================

      .. seealso:: :meth:`DAQ_Move_base.set_position_with_scaling`

      



   

   .. method:: Move_Home()

      
      Make the absolute move to original position (0).

      


   



.. py:class:: DAQ_Move_Kinesis_Flipper(parent=None,params_state=None)

   Wrapper object to access the conex fonctionnalities, similar wrapper for all controllers.

   ================ =================
   **Attributes**    **Type**
   *Kinesis_path*    string
   *serialnumbers*   int list
   *params*          dictionnary list
   ================ =================

   .. seealso:: :class:`DAQ_utils.ThreadCommand`


   

   

   

   .. method:: __init__(parent=None,params_state=None)

      



   

   .. method:: commit_settings(param)

      
      | Activate any parameter changes on the hardware.
      | Called after a param_tree_changed signal received from DAQ_Move_main.

      =============== ================================ ========================
      **Parameters**  **Type**                          **Description**
      *param*         instance of pyqtgraph Parameter  The parameter to update
      =============== ================================ ========================

      



   

   .. method:: Ini_Stage(controller=None,stage=None)

      
      Initialize the controller and stages (axes) with given parameters.

      ============== =========================================== ===========================================================================================
      **Parameters**  **Type**                                     **Description**

      *controller*    instance of the specific controller object  If defined this hardware will use it and will not initialize its own controller instance
      ============== =========================================== ===========================================================================================

      :returns:

                dictionnary containing keys:
                 * *info* : string displaying various info
                 * *controller*: instance of the controller object in order to control other axes without the need to init the same controller twice
                 * *stage*: instance of the stage (axis or whatever) object
                 * *initialized*: boolean indicating if initialization has been done corretly
      :rtype: Easydict

      .. seealso:: :meth:`DAQ_utils.ThreadCommand`

      



   

   .. method:: Close()

      
      Close the current instance of Kinesis Flipper instrument.

      



   

   .. method:: Stop_Motion()

      
      .. seealso:: :meth:`DAQ_Move_base.Move_Done`

      



   

   .. method:: Check_position()

      
      Get the current hardware position with scaling conversion of the Kinsesis insrument provided by get_position_with_scaling

      .. seealso:: :meth:`DAQ_Move_base.get_position_with_scaling`, :meth:`DAQ_utils.ThreadCommand`

      



   

   .. method:: Move_Abs(position)

      
      Make the hardware absolute move from the given position after thread command signal was received in DAQ_Move_main.

      =============== ========= =======================
      **Parameters**  **Type**   **Description**

      *position*       float     The absolute position
      =============== ========= =======================

      .. seealso:: :meth:`DAQ_Move_base.set_position_with_scaling`

      



   

   .. method:: Move_Rel(position)

      
      | Make the hardware relative move from the given position of the Kinesis instrument after thread command signal was received in DAQ_Move_main.
      |
      | The final target position is given by (current_position+position).

      =============== ========= =======================
      **Parameters**  **Type**   **Description**

      *position*       float     The absolute position
      =============== ========= =======================

      .. seealso:: :meth:`hardware.set_position_with_scaling`

      



   

   .. method:: Move_Home()

      
      Make the absolute move to original position (0).

      


   



.. py:class:: DAQ_Move_PI(parent=None,params_state=None)

   Wrapper object to access the Physik Instrumente fonctionnalities, similar wrapper for all controllers.

   =============== =======================
   **Attributes**   **Type**
   *GCS_path*       string
   *gcs_device*     string
   *devices*        instance of GCSDevice
   *params*         dictionnary list
   =============== =======================

   .. seealso:: :class:`DAQ_utils.ThreadCommand`


   

   

   

   .. method:: __init__(parent=None,params_state=None)

      



   

   .. method:: commit_settings(param)

      
      | Activate any parameter changes on the PI_GCS2 hardware.
      |
      | Called after a param_tree_changed signal from DAQ_Move_main.

      =============== ================================ ========================
      **Parameters**  **Type**                          **Description**
      *param*         instance of pyqtgraph Parameter  The parameter to update
      =============== ================================ ========================

      .. seealso:: :meth:`DAQ_utils.ThreadCommand`, :meth:`DAQ_Move_PI.enumerate_devices`

      



   

   .. method:: enumerate_devices()

      
      Enumerate PI_GCS2 devices from the connection type.

      :returns: The list of the devices port.
      :rtype: string list

      .. seealso:: :meth:`DAQ_utils.ThreadCommand`

      



   

   .. method:: Ini_device()

      
      .. seealso:: :meth:`DAQ_Move_base.Close`

      



   

   .. method:: Ini_Stage(controller=None,stage=None)

      
      Initialize the controller and stages (axes) with given parameters.

      =============== =========================================== ==========================================================================================
      **Parameters**  **Type**                                     **Description**

      *controller*     instance of the specific controller object  If defined this hardware will use it and will not initialize its own controller instance
      =============== =========================================== ==========================================================================================

      :returns:

                dictionnary containing keys:
                 * *info* : string displaying various info
                 * *controller*: instance of the controller object in order to control other axes without the need to init the same controller twice
                 * *stage*: instance of the stage (axis or whatever) object
                 * *initialized*: boolean indicating if initialization has been done corretly
      :rtype: Easydict

      .. seealso:: :meth:`DAQ_Move_PI.set_referencing`, :meth:`DAQ_utils.ThreadCommand`

      



   

   .. method:: is_referenced(axe)

      
      Return the referencement statement from the hardware device.

      ============== ========== ============================================
      **Parameters**  **Type**   **Description**

       *axe*          string     Representing a connected axe on controller
      ============== ========== ============================================

      :returns:
      :rtype: ???

      



   

   .. method:: set_referencing(axes)

      
      Set the referencement statement into the hardware device.

      ============== ============== ===========================================
      **Parameters**    **Type**      **Description**
       *axes*           string list  Representing connected axes on controller
      ============== ============== ===========================================

      



   

   .. method:: Close()

      
      Close the current instance of PI_GCS2 instrument.

      



   

   .. method:: Stop_Motion()

      
      .. seealso:: :meth:`DAQ_Move_base.Move_Done`

      



   

   .. method:: Check_position()

      
      Get the current hardware position with scaling conversion of the PI_GCS2 instrument provided by get_position_with_scaling

      .. seealso:: :meth:`DAQ_Move_base.get_position_with_scaling`, :meth:`DAQ_utils.ThreadCommand`

      



   

   .. method:: Move_Abs(position)

      
      Make the hardware absolute move of the PI_GCS2 instrument from the given position after thread command signal was received in DAQ_Move_main.

      =============== ========= =======================
      **Parameters**  **Type**   **Description**

      *position*       float     The absolute position
      =============== ========= =======================

      .. seealso:: :meth:`DAQ_Move_PI.set_referencing`, :meth:`DAQ_Move_base.set_position_with_scaling`, :meth:`DAQ_Move_base.poll_moving`

      



   

   .. method:: Move_Rel(position)

      
      Make the hardware relative move of the PI_GCS2 instrument from the given position after thread command signal was received in DAQ_Move_main.

      =============== ========= =======================
      **Parameters**  **Type**   **Description**

      *position*       float     The absolute position
      =============== ========= =======================

      .. seealso:: :meth:`DAQ_Move_base.set_position_with_scaling`, :meth:`DAQ_Move_PI.set_referencing`, :meth:`DAQ_Move_base.poll_moving`

      



   

   .. method:: Move_Home()

      
      .. seealso:: :meth:`DAQ_Move_PI.set_referencing`, :meth:`DAQ_Move_base.poll_moving`

      


   



.. py:class:: DAQ_Move_PiezoConcept(parent=None,params_state=None)

   Wrapper object to access the conex fonctionnalities, similar wrapper for all controllers.

   =============== ==================
   **Attributes**    **Type**
   *ports*           string list
   *TTL_children*    dictionnary list
   *params*          dictionnary list
   =============== ==================


   

   

   

   .. method:: __init__(parent=None,params_state=None)

      



   

   .. method:: Ini_Stage(controller=None,stage=None)

      
      Initialize the controller and stages (axes) with given parameters.

      =============== =========================================== ===========================================================================================
      **Parameters**   **Type**                                     **Description**

      *controller*     instance of the specific controller object   If defined this hardware will use it and will not initialize its own controller instance
      =============== =========================================== ===========================================================================================

      :returns:

                dictionnary containing keys:
                  * *info* : string displaying various info
                  * *controller*: instance of the controller object in order to control other axes without the need to init the same controller twice
                  * *stage*: instance of the stage (axis or whatever) object
                  * *initialized*: boolean indicating if initialization has been done corretly
      :rtype: Easydict

      .. seealso:: :meth:`DAQ_utils.ThreadCommand`

      



   

   .. method:: Close()

      
      Close the current instance of Piezo instrument.

      



   

   .. method:: Check_position()

      
      Check the current position from the hardware.

      :returns: The position of the hardware.
      :rtype: float

      .. seealso:: :meth:`DAQ_Move_base.get_position_with_scaling`, :meth:`DAQ_utils.ThreadCommand`

      



   

   .. method:: Move_Abs(position)

      
      Make the hardware absolute move of the Piezo instrument from the given position after thread command signal was received in DAQ_Move_main.

      =============== ========= =======================
      **Parameters**  **Type**   **Description**

      *position*       float     The absolute position
      =============== ========= =======================

      .. seealso:: :meth:`DAQ_Move_base.set_position_with_scaling`, :meth:`DAQ_Move_base.poll_moving`

      



   

   .. method:: Move_Rel(position)

      
      Make the hardware relative move of the Piezo instrument from the given position after thread command signal was received in DAQ_Move_main.

      =============== ========= =======================
      **Parameters**  **Type**   **Description**

      *position*       float     The absolute position
      =============== ========= =======================

      .. seealso:: :meth:`DAQ_Move_base.set_position_with_scaling`, :meth:`DAQ_Move_base.poll_moving`

      



   

   .. method:: Move_Home()

      
      Move to the absolute vlue 100 corresponding the default point of the Piezo instrument.

      .. seealso:: :meth:`DAQ_Move_base.Move_Abs`

      


   


