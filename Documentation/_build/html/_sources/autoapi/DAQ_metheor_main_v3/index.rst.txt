
:mod:`DAQ_metheor_main_v3`
==========================

.. py:module:: DAQ_metheor_main_v3









Module Contents
---------------



.. py:class:: DAQ_Metheor(parent,fname="")

   ========================== =============================== ============================================================
    **Attributes**             **Type**                          **Description**

    *log_signal*               instance of pyqtSignal          Message transmission signal containing string
    *update_settings_signal*   instance of pyqtSignal          Message transmission signal containing dictionnary
    *process_data_sig*         instance of pyqtSignal          Message transmission signal containing ordered dictionnary
    *params*                   dictionnary  list               Representing the parameter tree

    *det_name*                 string                          The detector name
    *dock_viewer_settings*     instance of Dock                Viewer settings element of the User Interface
    *dock_viewer*              instance of Dock                Viewer element of the User Interface
    *fft_widget*               instance of QWidget             fft base element of the User Interface
    *dock_fft*                 instance of Dock                fft element of the User Interface
    *temperature_widget*       instance of QWidget             Temperature base element of the User Interface
    *dock_temperature*         instance of Dock                Temperature element of the User Interface
    *dock_settings*            instance of Dock                Temperature viewer base element of the User Interface
    *temperature_viewer*       instance of Viewer1D            Temperature viewer element of the User Interface
    *date*                     string                          The current date
    *daq_type*                 string                          The dimension of the current DAQ (DAQ1D as default)
    *control_type*             string                          The name of the controller used
    *devices*                  string list                     The digilent hardware devices list
    *process_object*           instance of DAQ_Process_data    ???
    *menubar*                  instance of QMenuBar            The generic menubar object of menu
   ========================== =============================== ============================================================

   .. rubric:: References

   PyQt5, pyqtgraph, numpy, pandas, easydict, tables, QtWidgets, QObject


   

   

   

   .. method:: __init__(parent,fname="")

      



   

   .. method:: set_laser_controller()

      
      | Set the voltage node value and the laser frequency.
      | Configure the analog output pin with computed values and emit the 1/0 analog out signal.

      



   

   .. method:: send_data(datas)

      
      Send the given data via the process_data_sig signal

      =============== ============================== ============================
      **Parameters**   **Type**                       **Description**

       *datas*         double precision float array   The raw datas to be sended
      =============== ============================== ============================

      



   

   .. method:: create_menu(menubar)

      
      Set the filemenu structure with 6 elements into 2 submenus :
          * **Load data** : call the load_data method in three case with filetype parameter corresponding:
              * DAQType(.dat file)
              * DAQType(.h5 file)
              * Sensornet Type(.ddf file)
          * **Save data** : call the save_current method in two case with filetype parameter corresponding:
              * *Export as ascii* (.txt file)
              * *Save data* (.h5 file)
          * **Show/Hide log window** : set Visible the dock logger

      =============== ====================== ======================================
      **Parameters**   **Type**               **Description**

       *menubar*       instance of QMenuBar   The generic menubar object of menu
      =============== ====================== ======================================

      .. seealso:: :meth:`load_data`, :meth:`save_current`

      



   

   .. method:: save_current(file_type="h5")

      
      | Save the current data in an external file wich could be loaded later (or analysed with DAQ_Analysis in case of .h5 file).
      | The path is given by the select_file method (imported from DAQ_Utils).

      =============== ========== =================================================================================
      **Parameters**   **Type**   **Description**

      *filetype*        string     Specify the filetype to store between .dat file and .h5 file (.h5 by default)
      =============== ========== =================================================================================

      .. seealso:: :meth:`DAQ_utils.select_file`, :meth:`save_datas`

      



   

   .. method:: save_datas(filepathname,datas,file_type="h5")

      
      | Store the given datas into the file specified by his access (given by the file pathname argument) and his type (given by file_type argument).
      | Each file have a header including date.

      ================ =============================== ==============================================================================================
      **Parameters**     **Type**                       **Descritpion**

       *filepathname*     string                         Specify the path of the file to be saved

       *datas*            double precision float array   Raw values data to be stored

       *file_type*        string                         Specify the filetype to store between .dat file, .h5 file and .dtt file (.h5 by default)
      ================ =============================== ==============================================================================================

      .. seealso:: :meth:`DAQ_Utils.custom_parameter_tree.parameter_to_xml_string`, :meth:`update_status`

      



   

   .. method:: load_data(file_type="dat")

      
      Load data from the select_file method (imported from DAQ_Utils).

      In case of :

      * **.dat file** : the datas are stored in the User Interface viewer x_axis with update of show-data.
      * **.ddf file** : the datas are treated as a tree, stored in settings, and synchronously in the User Interface viewer x_axis updating show_data.
      * **.h5 file** : the h5 tree is readed node by node and stored into the User Interface viewer x_axis updating show_data.

      =============== ========== ==========================================================================================
      **Parameters**   **Type**   **Description**

      *file_type*       string    Specify the filetype to load between .dat file, .h5 file and .ddf file (.dat by default)
      =============== ========== ==========================================================================================

      .. seealso:: :meth:`DAQ_utils.select_file`, :meth:`DAQ_Utils.custom_parameter_tree.XML_string_to_parameter`, :meth:`update_status`

      



   

   .. method:: update_calibration_regions()

      
      Foreach region of the fftviewer, child are created with calibration values (temperature, distance and zone)

      



   

   .. method:: update_plot_process(data)

      
      Update data_to_save_export and in case of :
          * **raw analysis**       : Update the x_axis with time data in s ans show in the fft viewer
          * **FFT analysis**       : Update the x_axis with FFT frequency data in Hz and show in fft viewer
          * **average analysis**   : Update x_axis with length data in m and show in fft viewer
          * **temperature values** : Process the temperature

      =============== ============================== ============================
      **Parameters**  **Type**                        **Description**

       *data*          double precision float array   Data to be saved/exported
      =============== ============================== ============================

      .. seealso:: :meth:`process_temperature`, :meth:`update_status`

      



   

   .. method:: process_temperature()

      
      Start constants temperature process if temperature is constants or calibrate them else

      .. seealso:: :meth:`process_temperature_constants`, :meth:`process_temperature_calibration`

      



   

   .. method:: process_temperature_constants()

      
      | Update gamma, offset, loss, slope and amplification from settings tree and data AS/S and x_axis from data_to_save_export.
      | Update data temperature value from newest values of gamma, offset, loss, slope and amplification.
      | Temperature calculation is given by :
      |
      |      **gamma/(log(offset/(ratio*amp*exp(slope*loss*x_axis))))-273.15**
      |
      | Update the x_axis of temperature viewer and show data obtained in temperature viewer


      .. seealso:: :meth:`update_status`

      



   

   .. method:: process_temperature_calibration()

      
      | Compute Xbar from Abar and Bbar.
      | Abar index is found from settings tree indexes, Bbar index is found from log of (the mean of data-S divided by data-AS)
      | The Xbar value is used to update data temperature, once done show data obtained in temperature viewer and update data_to_save_export attribute.

      .. seealso:: :meth:`update_status`

      



   

   .. method:: add_log(txt)

      
      Add a log to the logger list from the givven text log and the current time

      ================ ========= ======================
      **Parameters**   **Type**   **Description**

       *txt*             string    the log to be added
      ================ ========= ======================

      



   

   .. method:: emit_log(txt)

      
      Emit a log-signal from the given log index

      =============== ======== =======================
      **Parameters**  **Type** **Description**

       *txt*           string   the log to be emitted
      =============== ======== =======================

      



   

   .. method:: update_status(txt,wait_time=0,log_type=None)

      
      Update the status of the detector module from the given log index with a delay of wait_time ms if specified (no delay by default)

      ================ ======== ========================================
      **Parameters**

       *txt*            string    the log index to be updated

       *wait_time*      int       delay time of update procedure in ms

       *log_type*       string    type of the log
      ================ ======== ========================================

      .. seealso:: :meth:`update_status`

      



   

   .. method:: quit_fun()

      
      Close the current instance of DAQ_Metheor with modules on cascades

      



   

   .. method:: parameter_tree_changed(param,changes)

      
      Check the changes in parameters, cahnges and data array and in case of value (change is active) :
          * **laser response rate** : do the laser controller setting if specified in the current childPath
          * **analysis**            : do analysis grabbing done the signal
          * **temperature**         : process temperature and show data
          * **laser wavelength**    : calculate gamma for laser wavelength

      ================ ======================================== =====================================================
      **Parameters**    **Type**                                 **Description**

       *param*           instance of pyqtgraph Parameter         the parameter to be checked

       *changes*        (parameters, changes, data) tuple list   (parameters, changes, data) array to be checked
      ================ ======================================== =====================================================

      .. seealso:: :meth:`set_laser_controller`, :meth:`send_data`, :meth:`process_temperature`, :meth:`calculate_gamma`

      



   

   .. method:: calculate_gamma()

      
      | Compute calculation of gamma given by :
      |

      | **h*c*dlambda/(lambda0**(2kb))**
      |

      where :
          * **h**       = 6.6260693E-34
          * **kb**      = 1.3806505E-23
          * **dlambda** = (strokes shift of laser)E-9
          * **lambda0** = (laser wavelength)E-9
          * **c**       = 3E8 m/s

      Once done, update temperature gamma with value

      



   

   .. method:: thread_status(status)

      
      | General function to get datas/infos from all threads back to the main.
      | In case of update state, update status from argument

      =============== ============ ====================================
      **Parameters**   **Type**     **Description**

       *status*        string list   the statut states array to treate
      =============== ============ ====================================

      .. seealso:: :meth:`update_status`

      


   



.. py:class:: DAQ_Process_data(params_state=None)

   =======================   ================================
   **Attributes**               **Type**

    *data_signal*            instance of pyqtSignal
    *status_sig*             instance of pyqtSignal
    *params*                 list
    *settings*               instance of pyqtgraph.parameter
    *Npts*                   int
    *data_AS*                int array
    *time_axis*              int array
    *omega_grid*             float array
    *time_grid*              float array
    *c*                      float
    *group_index_fiber_R*    float
    *group_index_fiber_AS*   float
    *group_index_fiber_S*    float
   =======================   ================================

   .. seealso:: :class:`send_param_status`

   .. rubric:: References

   QObject, pyqtSignal


   

   

   

   .. method:: __init__(params_state=None)

      
      
      



   

   .. method:: emit_status(status)

      
      Emit the status signal from the given array

      =============== ====== ======================================
      **Parameters**

       *status*        list   the statuts state list to be emitted
      =============== ====== ======================================

      



   

   .. method:: update_settings(settings_parameter_dict)

      
      Disconect the Tree State Changed signal if possible and upgrade settings Tree with Dictionnary values.

      ======================= ============ ======================================
      **Parameters**            **Type**      **Description**

      settings_parameter_dict  dictionnary  Dictionnary of parameters from paths
      ======================= ============ ======================================

      .. seealso:: :meth:`send_param_status`, :meth:`commit_settings`

      



   

   .. method:: commit_settings(param)

      
      Update fiberR,AS and S indexes in case of laser wavelength.

      =============== ================================ ==============================
      **Parameters**   **Type**                         **Description**

      *param*          instance of pyqtgraph parameter  The parameter to be commited
      =============== ================================ ==============================

      .. seealso:: :meth:`process_data`

      



   

   .. method:: send_param_status(param,changes)

      
      Send the status signal contening changes array in case of value or limits change statut.

      =============== ===================================  ==================================================
      **Parameters**   **Type**                             **Description**

       *param*         instance of pyqtgraph parameter      The parameter to be checked

       *changes*       tuple list                           The [parameter, change, data] array to be sended
      =============== ===================================  ==================================================

      



   

   .. method:: process_cmd(status)

      
      Update data or parameters in case of.

      =============== ============== ===========================================
      **Parameters**   **Type**       **Description**

       *status*        string array   Containing the command name to be executed
      =============== ============== ===========================================

      .. seealso:: :meth:`update_data`

      



   

   .. method:: update_data(data)

      
      Update data AS/S and time axis from given data and create the corresponding FFT axis.

      =============== ============================== ================================
      **Parameters**   **Type**                       **Description**

       *data*          double precision float array   Raw values array to be treated
      =============== ============================== ================================

      .. seealso:: :meth:`create_FFT_axis`, :meth:`process_data`, :meth:`emit_status`

      



   

   .. method:: create_FFT_axis()

      
      Create the FFT axis from time_axis attribute

      



   

   .. method:: process_data()

      


   


