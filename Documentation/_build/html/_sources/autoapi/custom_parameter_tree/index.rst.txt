
:mod:`custom_parameter_tree`
============================

.. py:module:: custom_parameter_tree



.. autoapi-nested-parse::

   Created on Mon Dec  4 10:59:53 2017

   @author: Weber










Module Contents
---------------





.. function:: walk_parameters_to_xml(parent_elt=None,param=None)

   
   To convert a parameter object (and children) to xml data tree.

   =============== ================================ ==================================
   **Parameters**   **Type**                         **Description**

   *parent_elt*     XML element                      the root element
   *param*          instance of pyqtgraph parameter  Parameter object to be converted
   =============== ================================ ==================================

   :returns: **XML element** -- XML element with subelements from Parameter object
   :rtype: parent_elt

   .. rubric:: Examples

   >>> from pyqtgraph.parametertree import Parameter, ParameterItem
   >>> import xml.etree.ElementTree as ET
   >>> params = [{title': 'Scan2D settings', 'name': 'scan2D_settings', 'type': 'group', 'children': [
                   {'title': 'Scan type:','name': 'scan2D_type', 'type': 'list', 'values': ['Spiral','Linear', 'back&forth'],'value': 'Spiral'},
                   {'title': 'Rstep:','name': 'Rstep_2d', 'type': 'float', 'value': 1., 'visible':True},
                   {'title': 'Rmax:','name': 'Rmax_2d', 'type': 'float', 'value': 10., 'visible':True}
                   ]}]
   >>> settings=Parameter.create(name='Settings', type='group', children=params)
   >>> param_type=settings.type()
   >>> base_elt=ET.Element(settings.name(),title=str(settings.opts['title']),type=param_type)

   >>> XML_elt=walk_parameters_to_xml(param=settings)
   >>> tree=ET.ElementTree(XML_elt)
   >>> tree.write('settings.xml')

   .. seealso:: :func:`walk_parameters_to_xml`

   







.. function:: parameter_to_xml_string(param)

   
   Convert  the given parameter to XML string.

   =============== ================================ ===============================
   **Parameters**    **Type**                        **Description**
   paramm           instance of pyqtgraph parameter  The parameter to be converted
   =============== ================================ ===============================

   :returns: The converted string XML element.
   :rtype: string

   .. seealso:: :func:`walk_parameters_to_xml`

   .. rubric:: Examples

   >>> import custom_parameter_tree as cpt
   >>> from pyqtgraph.parametertree import Parameter
   >>>    #Create an instance of Parameter
   >>> settings=Parameter(name='settings')
   >>> converted_xml=cpt.parameter_to_xml_string(settings)
   >>>    # The converted Parameter
   >>> print(converted_xml)
   b'<settings title="settings" type="None" />'

   







.. function:: parameter_to_xml_file(param,filename)

   
   Convert the given parameter to XML element and update the given XML file.

   =============== ================================= ================================
   **Parameters**    **Type**                          **Description**
   *param*           instance of pyqtgraph parameter   the parameter to be added
   *filename*        string                            the filename of the XML file
   =============== ================================= ================================

   .. seealso:: :func:`walk_parameters_to_xml`

   .. rubric:: Examples

   >>> import custom_parameter_tree as cpt
   >>> from pyqtgraph.parametertree import Parameter
   >>> import pathlib as pl
   >>>    #Creating function parameters
   >>> settings=Parameter(name='settings')
   >>> filename="my_xml_file"
   >>> cpt.parameter_to_xml_file(settings,filename)
   >>>    #Verifiy the integrity of the converted xml file
   >>> check=open("my_xml_file.xml","r")
   >>> print(check.read())
   <settings title="settings" type="None" />

   







.. function:: walk_xml_to_parameter(params=list,XML_elt=None)

   
   To convert an XML element (and children) to dict enabling creation of parameter object.

   =============== ================== =======================================
   **Parameters**   **Type**            **Description**

   *params*         dictionnary list    the list to create parameter object
   *XML_elt*        XML object          the XML object to be converted
   =============== ================== =======================================

   :returns: **params** -- list of dict to create parameter object
   :rtype: dictionnary list

   .. rubric:: Examples

   >>> from pyqtgraph.parametertree import Parameter, ParameterItem
   >>> import xml.etree.ElementTree as ET
   >>> tree = ET.parse('text_bis.xml')
   >>> root = tree.getroot()
   >>> params=walk_xml_to_parameter(XML_elt=root)
   >>> settings_xml=Parameter.create(name='Settings XML', type='group', children=params)
   >>> settings=Parameter.create(name='Settings', type='group', children=params)

   .. seealso:: :func:`walk_parameters_to_xml`

   







.. function:: XML_file_to_parameter(file_name)

   
   Convert a xml file into pyqtgraph parameter object.

   =============== =========== ================================================
   **Parameters**   **Type**    **Description**

   *file_name*     string      the file name of the XML file to be converted
   =============== =========== ================================================

   :returns: **params** -- a parameter list of dictionnary to init a parameter
   :rtype: dictionnary list

   .. seealso:: :func:`walk_parameters_to_xml`

   .. rubric:: Examples

   >>> from pyqtgraph.parametertree import Parameter
   >>> import custom_parameter_tree as cpt
   >>>   #Creating test Parameter
   >>> value=Parameter(name='value',value=10)
   >>> settings=Parameter(name='settings')
   >>> settings.addChild(value)
   <Parameter 'value' at 0x5655f78>
   >>>   #Creating test xml file
   >>> xml_file=cpt.parameter_to_xml_file(settings,"my_xml_file")
   >>> check=cpt.XML_file_to_parameter("my_xml_file.xml")
   >>>   #Verifiy the integrity of the converted parameter
   >>> print(check)
   [{'visible': True, 'type': 'None', 'name': 'value', 'value': '10', 'title': 'value'}]

   







.. function:: XML_string_to_parameter(xml_string)

   
   Convert a xml string into pyqtgraph parameter object.

   =============== =========== ================================
   **Parameters**   **Type**    **Description**

   xml_string       string      the xml string to be converted
   =============== =========== ================================

   :returns: **params**
   :rtype: a parameter list of dict to init a parameter

   .. seealso:: :func:`walk_parameters_to_xml`

   .. rubric:: Examples

   >>> import custom_parameter_tree as cpt
   >>> from pyqtgraph.parametertree import Parameter
   >>>    #Creating test parameter
   >>> settings=Parameter(name='settings')
   >>> child=Parameter(name='info', value=10, visible=True)
   >>> settings.addChild(child)
   <Parameter 'info' at 0x84ab558>
   >>>    #Creating test xml string
   >>> xml_string=cpt.parameter_to_xml_string(settings)
   >>>    #Verifiy the integrity of the converted parameter
   >>> converted_parameter=cpt.XML_string_to_parameter(xml_string)
   >>> print(converted_parameter)
   [{'visible': True, 'type': 'None', 'name': 'info', 'value': '10', 'title': 'info'}]

   







.. function:: iter_children(param,childlist=list)

   
   | Iterator over all sub children of a given parameters.
   | Returns all childrens names.

   =============== ================================= ====================================
   **Parameters**   **Type**                           **Description**
   *param*          instance of pyqtgraph parameter    the root node to be coursed
   *childlist*      list                               the child list recetion structure
   =============== ================================= ====================================

   :returns: **childlist** -- The list of the children from the given node.
   :rtype: parameter list

   .. rubric:: Examples

   >>> import custom_parameter_tree as cpt
   >>> from pyqtgraph.parametertree import Parameter
   >>>     #Creating the example tree
   >>> settings=Parameter(name='settings')
   >>> child1=Parameter(name='child1', value=10)
   >>> child2=Parameter(name='child2',value=10,visible=True,type='group')
   >>> child2_1=Parameter(name='child2_1', value=10)
   >>> child2_2=Parameter(name='child2_2', value=10)
   >>> child2.addChildren([child2_1,child2_2])
   >>> settings.addChildren([child1,child2])
   >>>     #Get the child list from the param argument
   >>> childlist=cpt.iter_children(settings)
   >>>     #Verify the integrity of result
   >>> print(childlist)
   ['child1', 'child2', 'child2_1', 'child2_2']

   





.. py:class:: GroupParameterItemCustom(param,depth)

   | Group parameters are used mainly as a generic parent item that holds (and groups!) a set of child parameters. It also provides a simple mechanism for displaying a button or combo that can be used to add new parameters to the group.
   |
   | This customization is made in order to respond to the visible options.
   | Overwrite the optsChanged method from GroupParameterItem class.


   

   

   

   .. method:: __init__(param,depth)

      



   

   .. method:: optsChanged(param,changed)

      


   



.. py:class:: GroupParameterCustom

   |
   | Group parameters are used mainly as a generic parent item that holds (and groups!) a set of child parameters.
   |
   | It also provides a simple mechanism for displaying a button or combo that can be used to add new parameters to the group.
   |
   | To enable this, the group  must be initialized with the 'addText' option (the text will be displayed on a button which, when clicked, will cause addNew() to be called).
   |
   | If the 'addList' option is specified as well, then a dropdown-list of addable items will be displayed instead of a button.
   |

   ============== ========================================
   **Attributes**    **Type**
   itemClass         instance of GroupParameterItemCustom
   ============== ========================================


   

   
   



.. py:class:: SpinBoxCustom(parent=None,value=0.0,**kwargs)

   

   

   .. method:: __init__(parent=None,value=0.0,**kwargs)

      



   

   .. method:: setOpts(**opts)

      
      Overriden class to add the field visible in the options.

      =============== =========== ======================
      **Parameters**    **Type**     **Description**
      *opts*            string       the vararg options
      =============== =========== ======================

      .. seealso:: :meth:`custom_parameter_tree.ItemSelect.setValue`

      


   



.. py:class:: WidgetParameterItemcustom(param,depth)

   This is a subclass of widget parameteritem in order to deal with the visiblily of the spinbox when parameter visibility os toggled.


   

   

   

   .. method:: __init__(param,depth)

      



   

   .. method:: makeWidget()

      
      | Return a single widget that should be placed in the second tree column.
      | The widget must be given three attributes:

      ==========  ============================================================
      sigChanged  a signal that is emitted when the widget's value is changed
      value       a function that returns the value
      setValue    a function that sets the value
      ==========  ============================================================

      | This is a good function to override in subclasses.

      .. seealso:: :meth:`SpinBoxCustom`, :meth:`custom_parameter_tree.setOpts`

      



   

   .. method:: showEditor()

      
      Show the widget attribute.

      



   

   .. method:: hideEditor()

      
      Hide the widget attribute.

      



   

   .. method:: optsChanged(param,opts)

      
      | Called when any options are changed that are not name, value, default, or limits.
      |
      | If widget is a SpinBox, pass options straight through.
      | So that only the display label is shown when visible option is toggled.

      =============== ================================== ==============================
      **Parameters**    **Type**                           **Description**
      *param*           instance of pyqtgraph parameter    the parameter to check
      *opts*            string list                        the associated options list
      =============== ================================== ==============================

      .. seealso:: :meth:`optsChanged`

      


   



.. py:class:: SimpleParameterCustom(*args,**kargs)

   

   

   .. method:: __init__(*args,**kargs)

      


   



.. py:class:: ListParameterItem_custom(param,depth)

   WidgetParameterItem subclass providing comboBox that lets the user select from a list of options.


   

   

   

   .. method:: __init__(param,depth)

      



   

   .. method:: makeWidget()

      
      Make a widget from self parameter options, connected to the buttonClicked function.

      :returns: **w** -- the initialized widget
      :rtype: widget

      .. seealso:: :meth:`buttonClicked`, :meth:`limitsChanged`, :meth:`custom_parameter_tree.ItemSelect.setValue`

      



   

   .. method:: value()

      



   

   .. method:: setValue(val)

      



   

   .. method:: limitsChanged(param,limits)

      
      Set up forward / reverse mappings for {name:value} limits dictionnary.

      =============== ================================== ========================================
      **Parameters**    **Type**                          **Description**
      *param*           instance of pyqtgraph parameter    Not used
      *limits*          dictionnary                        the limits dictionnary to be mapped
      =============== ================================== ========================================

      



   

   .. method:: buttonClicked()

      
      |
      | Append the self limits attributes an added parameter with string value.
      | Update parameter and call the limitschanged method to map the added parameter.

      .. seealso:: :meth:`limitsChanged`, :meth:`custom_parameter_tree.ItemSelect.setValue`

      



   

   .. method:: optsChanged(param,opts)

      
      Called when any options are changed that are not name, value, default, or limits.

      =============== ================================== =======================================
      **Parameters**    **Type**                           **Description**
      *param*           instance of pyqtgraph parameter    The parameter to be checked
      *opts*            string list                        The option dictionnary to be checked
      =============== ================================== =======================================

      .. seealso:: :meth:`optsChanged`

      


   



.. py:class:: ListParameter_custom(**opts)

   =============== =======================================
   **Attributes**    **Type**
   *itemClass*       instance of ListParameterItem_custom
   *sigActivated*    instance of pyqt Signal
   =============== =======================================


   

   

   

   .. method:: __init__(**opts)

      



   

   .. method:: activate()

      
      Emit the Activated signal.

      


   



.. py:class:: Combo_pb(items=list)

   

   

   .. method:: __init__(items=list)

      



   

   .. method:: initUI()

      
      Init the User Interface.

      


   



.. py:class:: TableParameterItem(param,depth)

   

   

   .. method:: __init__(param,depth)

      



   

   .. method:: treeWidgetChanged()

      
      Check for changement in the Widget tree.

      



   

   .. method:: makeWidget()

      
      Make and initialize an instance of Table_custom.

      :returns: **table** -- The initialized table.
      :rtype: instance of Table_custom.

      .. seealso:: :meth:`Table_custom`

      



   

   .. method:: valueChanged(param,val,force=False)

      
      Set a new value to the self widget.

      =============== ================================== ======================================
      **Parameters**    **Type**                           **Description**
      *param*           instance of pyqtgraph parameter    Not used
      *val*             data dictionnary                   The dictionnary to add at the table
      *force*           boolean                            Not used
      =============== ================================== ======================================

      .. seealso:: :meth:`custom_parameter_tree.Table_custom.set_table_value`

      


   



.. py:class:: Table_custom()

   ============== ===========================
   *Attributes**    **Type**
   *valuechanged*   instance of pyqt Signal
   *QtWidgets*      instance of QTableWidget
   ============== ===========================


   

   

   

   .. method:: __init__()

      



   

   .. method:: get_table_value()

      
      Get the contents of the self coursed table.

      :returns: **data** -- The getted values dictionnary.
      :rtype: ordered dictionnary

      



   

   .. method:: set_table_value(data_dict)

      
      Set the data values dictionnary to the custom table.

      =============== ====================== ================================================
      **Parameters**    **Type**               **Description**
      *data_dict*       ordered dictionnary    the contents to be stored in the custom table
      =============== ====================== ================================================

      


   



.. py:class:: TableParameter(*args,**kargs)

   =============== =================================
   **Attributes**    **Type**
   *itemClass*       instance of TableParameterItem
   *Parameter*       instance of pyqtgraph parameter
   =============== =================================


   

   

   

   .. method:: __init__(*args,**kargs)

      


   



.. py:class:: ItemSelectParameterItem(param,depth)

   

   

   .. method:: __init__(param,depth)

      



   

   .. method:: treeWidgetChanged()

      
      
      



   

   .. method:: makeWidget()

      
      | Make and initialize an instance of ItemSelect_pb with itemselect value.
      | Connect the created object with the buttonClicked function.

      



   

   .. method:: buttonClicked()

      
      Append to the param attribute the dictionnary obtained from the QtWidget add parameter procedure.

      .. seealso:: :meth:`custom_parameter_tree.value`, :meth:`custom_parameter_tree.ItemSelect.setValue`

      



   

   .. method:: optsChanged(param,opts)

      
      Called when any options are changed that are not name, value, default, or limits.

      .. seealso:: :meth:`optsChanged`

      


   



.. py:class:: ItemSelect_pb()

   

   

   .. method:: __init__()

      



   

   .. method:: initUI()

      


   



.. py:class:: ItemSelect()

   

   

   .. method:: __init__()

      



   

   .. method:: get_value()

      
      Get the dictionnary of values contained in the QtWidget attribute.

      :returns: The dictionnary of all_items compared to the slelectedItems.
      :rtype: dictionnary

      



   

   .. method:: all_items()

      
      Get the all_items list from the self QtWidget attribute.

      :returns: The item list.
      :rtype: list

      



   

   .. method:: set_value(values)

      
      Set values to the all_items attributes filtering values by the 'selected' key.

      =============== ============== =======================================
      **Parameters**    **Type**       **Description**
      *values*          dictionnary    the values dictionnary to be setted.
      =============== ============== =======================================

      


   



.. py:class:: ItemSelectParameter

   Editable string; displayed as large text box in the tree.

   =============== ======================================
   **Attributes**    **Type**
   *itemClass*       instance of ItemSelectParameterItem
   *sigActivated*    instance of pyqt Signal
   =============== ======================================


   

   

   

   .. method:: activate()

      
      Activate the "Activated" signal attribute0

      


   



.. py:class:: file_browserParameterItem(param,depth)

   

   

   .. method:: __init__(param,depth)

      



   

   .. method:: treeWidgetChanged()

      



   

   .. method:: makeWidget()

      
      Make an initialized file_browser object with parameter options dictionnary ('readonly' key)0

      :returns: **w** -- The initialized file browser.
      :rtype: filebrowser

      .. seealso:: :meth:`file_browser`

      


   



.. py:class:: file_browser(init_path="D:/Data")

   ================ =========================
   **Attributes**    **Type**
   *value_changed*   instance of pyqt Signal
   *path*            string
   ================ =========================

   .. seealso:: :class:`browse_path`


   

   

   

   .. method:: __init__(init_path="D:/Data")

      



   

   .. method:: browse_path()

      
      Browse the path attribute if exist.

      .. seealso:: :meth:`set_path`

      



   

   .. method:: set_path(path_file)

      
      Set the base path attribute with the given path_file.

      =============== =========== ===========================
      **Parameters**    **Type**    **Description**
      *path_file*       string      the pathname of the file
      =============== =========== ===========================

      



   

   .. method:: get_value()

      
      Get the value of the base_path_edit attribute.

      :returns: the path name
      :rtype: string

      



   

   .. method:: initUI()

      
      Init the User Interface.

      


   



.. py:class:: file_browserParameter

   Editable string; displayed as large text box in the tree.

   .. seealso:: :class:`file_browserParameterItem`


   

   
   



.. py:class:: Plain_text_pbParameterItem(param,depth)

   

   

   .. method:: __init__(param,depth)

      



   

   .. method:: treeWidgetChanged()

      



   

   .. method:: makeWidget()

      
      Make and initialize an instance of Plain_text_pb object from parameter options dictionnary (using 'readonly' key).

      :returns: The initialized object.
      :rtype: Plain_text_pb object

      .. seealso:: :meth:`Plain_text_pb`, :meth:`buttonClicked`

      



   

   .. method:: buttonClicked()

      
      Activate the parameter attribute.

      .. seealso:: :meth:`custom_parameter_tree.ItemSelectParameter.activate`

      


   



.. py:class:: Plain_text_pb()

   ================ ========================
   **Attributes**    **Type**
   *value_changed*   instance of pyqt Signal
   ================ ========================

   .. seealso:: :class:`initUI`, :class:`emitsignal`


   

   

   

   .. method:: __init__()

      



   

   .. method:: emitsignal()

      
      Emit the value changed signal from the text_edit attribute.

      



   

   .. method:: set_value(txt)

      
      Set the value of the text_edit attribute.

      =============== =========== ================================
      **Parameters**    **Type**    **Description**
      *txt*             string      the string value to be setted
      =============== =========== ================================

      



   

   .. method:: get_value()

      
      Get the value of the text_edit attribute.

      :returns: The string value of text_edit.
      :rtype: string

      



   

   .. method:: initUI()

      
      Init the User Interface.

      


   



.. py:class:: Plain_text_pbParameter

   Editable string; displayed as large text box in the tree.


   

   

   

   .. method:: activate()

      
      Send the Activated signal.

      


   


