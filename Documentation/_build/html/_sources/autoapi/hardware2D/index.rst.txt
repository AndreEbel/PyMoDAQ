
:mod:`hardware2D`
=================

.. py:module:: hardware2D









Module Contents
---------------



.. py:class:: DAQ_2DViewer_Det_type

   Enum class of Det Type.

   =============== ================
   **Attributes**    **Type**
   *Mock*            int
   *OrsayCamera*     int
   *TCP_GRABBER*     int
   *names*          string list???
   =============== ================


   

   

   

   .. method:: names()

      


   



.. py:class:: DAQ_2DViewer_Mock(parent=None,params_state=None)

   =============== ==================
   **Attributes**   **Type**
   *params*         dictionnary list
   *x_axis*         1D numpy array
   *y_axis*         1D numpy array
   =============== ==================

   .. seealso:: :class:`utility_classes.DAQ_Viewer_base`


   

   

   

   .. method:: __init__(parent=None,params_state=None)

      



   

   .. method:: commit_settings(param)

      
      Activate parameters changes on the hardware.

      =============== ================================ ===========================
      **Parameters**   **Type**                          **Description**
      *param*          instance of pyqtgraph Parameter   the parameter to activate
      =============== ================================ ===========================

      .. seealso:: :meth:`set_Mock_data`

      



   

   .. method:: set_Mock_data()

      
      | Set the x_axis and y_axis with a linspace distribution from settings parameters.
      |

      Once done, set the data mock with parameters :
          * **Amp** : The amplitude
          * **x0** : the origin of x
          * **dx** : the derivative x pos
          * **y0** : the origin of y
          * **dy** : the derivative y pos
          * **n** : ???
          * **amp_noise** : the noise amplitude

      :returns:
      :rtype: The computed data mock.

      



   

   .. method:: Ini_Detector()

      
      Initialisation procedure of the detector initializing the status dictionnary.

      .. seealso:: :meth:`DAQ_utils.ThreadCommand`, :meth:`get_xaxis`, :meth:`get_yaxis`

      



   

   .. method:: Close()

      
      not implemented.

      



   

   .. method:: get_xaxis()

      
      Get the current x_axis from the Mock data setting.

      :returns: the current x_axis.
      :rtype: 1D numpy array

      .. seealso:: :meth:`set_Mock_data`

      



   

   .. method:: get_yaxis()

      
      Get the current y_axis from the Mock data setting.

      :returns: the current y_axis.
      :rtype: 1D numpy array

      .. seealso:: :meth:`set_Mock_data`

      



   

   .. method:: Grab(Naverage=1)

      
      | For each integer step of naverage range set mock data.
      | Construct the data matrix and send the data_grabed_signal once done.

      =============== ======== ===============================================
      **Parameters**  **Type**  **Description**
      *Naverage*      int       The number of images to average.
                                specify the threshold of the mean calculation
      =============== ======== ===============================================

      .. seealso:: :meth:`set_Mock_data`

      



   

   .. method:: Stop()

      
      not implemented.

      


   



.. py:class:: DAQ_2DViewer_OrsayCamera(parent=None,params_state=None)

   =============== ==================
   **Attributes**   **Type**
   *params*         dictionnary list
   *x_axis*         1D numpy array
   *y_axis*         1D numpy array
   *camera*         ???
   *data*           float array ???
   *CCDSIZEX*       ???
   *CCDSIZEY*       ???
   *data_pointer*   ???
   =============== ==================

   .. seealso:: :class:`utility_classes.DAQ_Viewer_base`


   

   

   

   .. method:: __init__(parent=None,params_state=None)

      



   

   .. method:: commit_settings(param)

      
      | Activate parameters changes on the hardware from parameter's name.
      |

      =============== ================================    =========================
      **Parameters**   **Type**                           **Description**
      *param*          instance of pyqtgraph parameter    The parameter to activate
      =============== ================================    =========================

      Three profile of parameter :
          * **bin_x** : set binning camera from bin_x parameter's value
          * **bin_y** : set binning camera from bin_y parameter's value
          * **set_point** : Set the camera's temperature from parameter's value.

      



   

   .. method:: dataLocker(camera,datatype,sx,sy,sz)

      
      | CallBack to obtain the tab and store the newest data.
      | In a full program context, it is recommanded to lock the tab (to keep size values, type and integrity for example).
      | It permit to use the same code in case of callback.
      |

      The data type is :
          * **1**  : byte
          * **2**  : short
          * **3**  : long
          * **5**  : unsigned byte
          * **6**  : unsgned short
          * **7**  : unsigned long
          * **11** : float 32 bit
          * **12** : double 64 bit

      =============== =============== =============================================================================
      **Parameters**    **Type**        **Description**
      *camera*                          in case of differents cameras, index pointing the camera sending the datas
      *datatype*        int             defined above
      *sx*              int array       X image size
      *sy*              int array       Y image size
      *sz*              int array       Z image size
      =============== =============== =============================================================================

      :returns:
      :rtype: ???

      



   

   .. method:: dataUnlocker(camera,newdata)

      
      Transmission of new acquired data

      =============== =============== ===============================
      **Parameters**   **Type**        **Description**

      *camera*         c_void pointer  pointer to camera object

      *newdata*        bool            True if new data is available
      =============== =============== ===============================

      .. seealso:: :meth:`emit_data`

      



   

   .. method:: emit_data()

      
      Fonction used to emit data obtained by dataUnlocker callback or average it.

      .. seealso:: :meth:`DAQ_utils.ThreadCommand`

      



   

   .. method:: Ini_Detector()

      
      Initialisation procedure of the detector in four steps :
          * Register callback to get data from camera
          * Get image size and current binning
          * Set and Get temperature from camera
          * Init axes from image

      :returns: The initialized status.
      :rtype: string list ???

      .. seealso:: :meth:`DAQ_utils.ThreadCommand`, :meth:`hardware1D.DAQ_1DViewer_Picoscope.update_pico_settings`

      



   

   .. method:: timerEvent(event)

      
      | Called by set timers (only one for this self).
      | Used here to update temperature status0.

      =============== ==================== ==============================================
      **Parameters**    **Type**             **Description**

      *event*           QTimerEvent object   Containing id from timer issuing this event
      =============== ==================== ==============================================

      



   

   .. method:: Close()

      
      Should be used to uninitialize camera but none provided by Marcel.

      



   

   .. method:: get_xaxis()

      
      Obtain the horizontal axis of the image.

      :returns: Contains a vector of integer corresponding to the horizontal camera pixels.
      :rtype: 1D numpy array

      



   

   .. method:: get_yaxis()

      
      Obtain the vertical axis of the image.

      :returns: Contains a vector of integer corresponding to the vertical camera pixels.
      :rtype: 1D numpy array

      



   

   .. method:: Grab(Naverage=1)

      
      Start new acquisition in two steps :
          * Initialize data: self.data for the memory to store new data and self.data_average to store the average data
          * Start acquisition with the given exposure in ms, in "1d" or "2d" mode

      =============== =========== =============================
      **Parameters**   **Type**    **Description**
      Naverage         int         Number of images to average
      =============== =========== =============================

      .. seealso:: :meth:`DAQ_utils.ThreadCommand`

      



   

   .. method:: Stop()

      
      Stop the camera's actions.

      


   



.. py:class:: DAQ_2DViewer_TCP_GRABBER(parent=None,params_state=None)

   ================= ==============================
   **Attributes**      **Type**
   *command_server*    instance of pyqtSignal
   *x_axis*            1D numpy array
   *y_axis*            1D numpy array
   *data*              double precision float array
   ================= ==============================

   .. seealso:: :class:`utility_classes.DAQ_TCP_server`


   

   

   

   .. method:: __init__(parent=None,params_state=None)

      



   

   .. method:: data_ready(data)

      
      Send the grabed data signal.

      



   

   .. method:: commit_settings(param)

      



   

   .. method:: Ini_Detector()

      
      | Initialisation procedure of the detector updating the status dictionnary.
      |
      | Init axes from image , here returns only None values (to tricky to di it with the server and not really necessary for images anyway)

      .. seealso:: :meth:`utility_classes.DAQ_TCP_server.init_server`, :meth:`get_xaxis`, :meth:`get_yaxis`

      



   

   .. method:: Close()

      
      Should be used to uninitialize hardware.

      .. seealso:: :meth:`utility_classes.DAQ_TCP_server.close_server`

      



   

   .. method:: get_xaxis()

      
      Obtain the horizontal axis of the image.

      :returns: Contains a vector of integer corresponding to the horizontal camera pixels.
      :rtype: 1D numpy array

      



   

   .. method:: get_yaxis()

      
      Obtain the vertical axis of the image.

      :returns: Contains a vector of integer corresponding to the vertical camera pixels.
      :rtype: 1D numpy array

      



   

   .. method:: Grab(Naverage=1)

      
      Start new acquisition.
      Grabbed indice is used to keep track of the current image in the average.

      ============== ========== ==============================
      **Parameters**   **Type**  **Description**

      *Naverage*        int       Number of images to average
      ============== ========== ==============================

      .. seealso:: :meth:`utility_classes.DAQ_TCP_server.process_cmds`

      



   

   .. method:: Stop()

      
      not implemented.

      


   


